# .github/workflows/test.yml
name: tests

on:
  push:
  pull_request:

jobs:
  bats:
    runs-on: ubuntu-latest
    env:
      SKIP_ROOT_CHECK: "1"
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Ensure executable bits
        run: chmod +x bin/usb-wakeup-blocker.sh test/run-tests.sh

      - name: Init submodules (recursive)
        run: git submodule update --init --recursive

      - name: Install kcov build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake libelf-dev libdw-dev libcurl4-openssl-dev zlib1g-dev

      - name: Build and install kcov
        run: |
          git clone https://github.com/SimonKagstrom/kcov.git
          cd kcov
          mkdir build
          cd build
          cmake ..
          make
          sudo make install

      - name: Run Bats tests with kcov
        run: kcov --include-path=bin/usb-wakeup-blocker.sh --exclude-pattern=test/ --exclude-pattern=/usr/share/kcov/ test_coverage_output ./test/run-tests.sh > test_output.log 2>&1
        continue-on-error: true

      - name: Upload kcov coverage report
        uses: actions/upload-artifact@v4
        with:
          name: kcov-report
          path: test_coverage_output

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./test_coverage_output/cobertura.xml # kcov generates cobertura.xml by default
          fail_ci_if_error: true # Optional: Don't fail CI if Codecov upload fails
          verbose: true # Optional: Enable verbose logging for debug

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: test_output.log

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Run ShellCheck
        run: |
          find . -name "*.sh" -print0 | xargs -0 shellcheck
